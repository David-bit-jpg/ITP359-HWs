{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4","mount_file_id":"1rKK4rj5Q4mzj2AG6Ahd3d_LE43IMo4Ey","authorship_tag":"ABX9TyNS+yRTw3Rm1/OGCh8zaIk7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"a0JJRC8-Zu7o","executionInfo":{"status":"ok","timestamp":1726210804068,"user_tz":420,"elapsed":1907,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}},"outputId":"5aeb85b6-cb54-4007-8d92-6c6a0352878e"},"execution_count":51,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"markdown","source":["1.\tRead the dataset into a dataframe. Parse the pickup_datetime so that it is read as timestamp. (1)"],"metadata":{"id":"cC68mVWoZeP5"}},{"cell_type":"code","source":["import pandas as pd\n","fares = pd.read_csv(\"drive/MyDrive/ColabNotebooks/ITP359/HW1/taxifares.csv\",parse_dates=['pickup_datetime'])\n","\n","# print(fares.dtypes)\n","# print(fares.pickup_datetime)"],"metadata":{"id":"HAuzW1jxZbnR","executionInfo":{"status":"ok","timestamp":1726210804944,"user_tz":420,"elapsed":878,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}}},"execution_count":52,"outputs":[]},{"cell_type":"markdown","source":["2.\tExplore the dataset and determine what is the target variable. (1)\n"],"metadata":{"id":"j5BfNuVvZnGk"}},{"cell_type":"code","source":["\n","# print(\"Data Information:\")\n","# print(fares.info())\n","\n","\n","print(\"Target variable: fare_amount\")\n","# print(fares.fare_amount)\n"],"metadata":{"id":"bGNmhULgB-uU","executionInfo":{"status":"ok","timestamp":1726210804944,"user_tz":420,"elapsed":4,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"bba4699f-c02d-4034-a11c-02e57a5f171a"},"execution_count":53,"outputs":[{"output_type":"stream","name":"stdout","text":["Target variable: fare_amount\n"]}]},{"cell_type":"markdown","source":["3. Drop factor(s) that are not likely to be relevant for predicting the taxi fare. (2)"],"metadata":{"id":"nsiiAo3sFDFb"}},{"cell_type":"code","source":["#The column Key is just a serial number tracking different orders.\n","#This has nothing to do with the fare and our prediction model\n","\n","#Drop Key\n","fares.drop('key', axis=1, inplace=True)\n","\n","# print(fares.info())"],"metadata":{"id":"RRsf97hXFGUL","executionInfo":{"status":"ok","timestamp":1726210804944,"user_tz":420,"elapsed":3,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}}},"execution_count":54,"outputs":[]},{"cell_type":"markdown","source":["4. You will notice that several rides have 0 for latitude and/or longitude data. You may want to drop these rides for better model performance."],"metadata":{"id":"eVxUO5NqGGf-"}},{"cell_type":"code","source":["fares = fares[(fares['pickup_longitude'] != 0) & (fares['pickup_latitude'] != 0) &\n","              (fares['dropoff_longitude'] != 0) & (fares['dropoff_latitude'] != 0)]\n","# print(fares.info())"],"metadata":{"id":"-U0k_bHIGJsb","executionInfo":{"status":"ok","timestamp":1726210804944,"user_tz":420,"elapsed":3,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}}},"execution_count":55,"outputs":[]},{"cell_type":"markdown","source":["5. Extract the weekday and the time (hours/minutes) from the pickup_datetime. Store in the data frame. Drop the pickup_datetime. (2)"],"metadata":{"id":"v3GgfZeEGjSR"}},{"cell_type":"code","source":["fares['weekday'] = fares['pickup_datetime'].dt.day_name()\n","weekday_mapping = {\n","    'Monday': 0.0,\n","    'Tuesday': 1.0,\n","    'Wednesday': 2.0,\n","    'Thursday': 3.0,\n","    'Friday': 4.0,\n","    'Saturday': 5.0,\n","    'Sunday': 6.0\n","}\n","fares['weekday'] = fares['weekday'].map(weekday_mapping)\n","fares['hour'] = fares['pickup_datetime'].dt.hour\n","fares['minute'] = fares['pickup_datetime'].dt.minute\n","\n","fares.drop('pickup_datetime', axis=1, inplace=True)\n"],"metadata":{"id":"FIqdBLzfGlKI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1726210804944,"user_tz":420,"elapsed":3,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}},"outputId":"f75f04a5-4556-4db9-8e68-dd56315303b0"},"execution_count":56,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-56-51a8620ebbad>:1: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  fares['weekday'] = fares['pickup_datetime'].dt.day_name()\n","<ipython-input-56-51a8620ebbad>:11: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  fares['weekday'] = fares['weekday'].map(weekday_mapping)\n","<ipython-input-56-51a8620ebbad>:12: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  fares['hour'] = fares['pickup_datetime'].dt.hour\n","<ipython-input-56-51a8620ebbad>:13: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame.\n","Try using .loc[row_indexer,col_indexer] = value instead\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  fares['minute'] = fares['pickup_datetime'].dt.minute\n","<ipython-input-56-51a8620ebbad>:15: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  fares.drop('pickup_datetime', axis=1, inplace=True)\n"]}]},{"cell_type":"markdown","source":["  6. Compute the distance between pickup_longitude and dropoff_longitude by using this approximate formula for relatively close points in the earth (e.g. within NYC) (2)\n","\n","  a = diff in longitude of two points * 54.6\n","\n","  b = diff in latitude of two points * 69.0\n","  \n","  distance in miles = sqrt (a^2 + b^2)\n"],"metadata":{"id":"VubIOxS2YwO1"}},{"cell_type":"code","source":["import math\n","def calculate_distance(pickup_longitude, dropoff_longitude, pickup_latitude, dropoff_latitude):\n","  a = abs(pickup_longitude - dropoff_longitude) * 54.6\n","  b = abs(pickup_latitude - dropoff_latitude) * 69.0\n","  distance = math.sqrt(a ** 2 + b ** 2)\n","  return distance\n","\n","fares['distance'] = fares.apply(lambda orders: calculate_distance(orders['pickup_longitude'], orders['dropoff_longitude'], orders['pickup_latitude'], orders['dropoff_latitude']), axis = 1)\n","\n","# print(fares['distance'])\n","\n"],"metadata":{"id":"RG4Hk5S_Yy6q","executionInfo":{"status":"ok","timestamp":1726210805662,"user_tz":420,"elapsed":720,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}}},"execution_count":57,"outputs":[]},{"cell_type":"markdown","source":["7. Drop latitude and longitude columns. (1)"],"metadata":{"id":"iQTzNnYodlBq"}},{"cell_type":"code","source":["fares.drop(['pickup_longitude', 'dropoff_longitude', 'pickup_latitude', 'dropoff_latitude'], axis=1, inplace=True)\n","\n","#check final table\n","print(fares.head())\n","print(fares.info())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"A95KVidrdnrP","executionInfo":{"status":"ok","timestamp":1726210805662,"user_tz":420,"elapsed":5,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}},"outputId":"e5c1547c-8f3f-49b2-f81e-ab14244da627"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["   fare_amount  passenger_count  weekday  hour  minute  distance\n","0         17.5                1      5.0     1       8  2.880330\n","1         22.0                2      2.0    13      39  2.698705\n","2         11.0                1      4.0    21       1  2.471339\n","3         18.5                1      6.0    19      31  1.359135\n","4         10.0                1      3.0    18      57  2.910496\n","<class 'pandas.core.frame.DataFrame'>\n","Index: 54331 entries, 0 to 55365\n","Data columns (total 6 columns):\n"," #   Column           Non-Null Count  Dtype  \n","---  ------           --------------  -----  \n"," 0   fare_amount      54331 non-null  float64\n"," 1   passenger_count  54331 non-null  int64  \n"," 2   weekday          54331 non-null  float64\n"," 3   hour             54331 non-null  int32  \n"," 4   minute           54331 non-null  int32  \n"," 5   distance         54331 non-null  float64\n","dtypes: float64(3), int32(2), int64(1)\n","memory usage: 2.5 MB\n","None\n"]}]},{"cell_type":"markdown","source":["8. Assign X (features variables) and y (target variable) (1)"],"metadata":{"id":"Ya2UHb94CYY5"}},{"cell_type":"code","source":["#X should be everything except for fare_amount\n","X = fares.drop('fare_amount', axis=1)\n","\n","#Y should just be fare_amount\n","y = fares['fare_amount']"],"metadata":{"id":"uyJiChu0Ccb4","executionInfo":{"status":"ok","timestamp":1726210805662,"user_tz":420,"elapsed":4,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}}},"execution_count":59,"outputs":[]},{"cell_type":"markdown","source":["9. Build a keras sequential model with two dense layers. Number of neurons is your choice (> 50). Activation function is your choice. (3)"],"metadata":{"id":"GojK8_CQDMnN"}},{"cell_type":"code","source":["import keras\n","\n","model = keras.models.Sequential()\n","#128/64 neurons, input dimension should be X's column number, I chose ReLu\n","model.add(keras.layers.Dense(128, input_dim=X.shape[1], activation='relu'))\n","model.add(keras.layers.Dense(64, input_dim=X.shape[1], activation='relu'))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rbcf-8reDQMd","executionInfo":{"status":"ok","timestamp":1726210805662,"user_tz":420,"elapsed":4,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}},"outputId":"bdae91af-1d8f-45ce-98d2-4e73720460b0"},"execution_count":60,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]}]},{"cell_type":"markdown","source":["10. Add a dense output layer. How many neurons in this layer? (2)"],"metadata":{"id":"EVRqBSh6FNgk"}},{"cell_type":"code","source":["#only 1 neuron because we are only predicting y, which only contains the fare_amount\n","model.add(keras.layers.Dense(1))"],"metadata":{"id":"_L6zn7T_Fly5","executionInfo":{"status":"ok","timestamp":1726210805662,"user_tz":420,"elapsed":3,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}}},"execution_count":61,"outputs":[]},{"cell_type":"markdown","source":["11. Compile the model with optimizer as adam, loss as mean squared error, metrics as mean squared error. (2)"],"metadata":{"id":"Ex5xC2VHF0ix"}},{"cell_type":"code","source":["model.compile(optimizer='adam', loss='mean_squared_error', metrics=['mean_squared_error'])"],"metadata":{"id":"SiWRMdlOF2z7","executionInfo":{"status":"ok","timestamp":1726210805662,"user_tz":420,"elapsed":3,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}}},"execution_count":62,"outputs":[]},{"cell_type":"markdown","source":["12. Train the model. Partition with a split of 70/30. Epochs > 30. (2)\n"],"metadata":{"id":"6YQ9P-C-F9kT"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","#use train_test_split from sklearn, test_size of 0.3 as instructed\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=45)\n","\n","history = model.fit(X_train, y_train,\n","                    validation_data=(X_test, y_test),\n","                    epochs=50,\n","                    batch_size=32)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xpByKYlwGAM7","executionInfo":{"status":"ok","timestamp":1726210979463,"user_tz":420,"elapsed":173804,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}},"outputId":"8e186a77-a88c-4a87-8213-64d4c254c332"},"execution_count":63,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m8s\u001b[0m 5ms/step - loss: 11058.0635 - mean_squared_error: 11058.0635 - val_loss: 32.1408 - val_mean_squared_error: 32.1408\n","Epoch 2/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 2ms/step - loss: 27.6346 - mean_squared_error: 27.6346 - val_loss: 27.9899 - val_mean_squared_error: 27.9899\n","Epoch 3/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - loss: 25.5297 - mean_squared_error: 25.5297 - val_loss: 58.4155 - val_mean_squared_error: 58.4155\n","Epoch 4/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - loss: 86.7915 - mean_squared_error: 86.7915 - val_loss: 64.0180 - val_mean_squared_error: 64.0180\n","Epoch 5/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - loss: 189.3811 - mean_squared_error: 189.3811 - val_loss: 60.7068 - val_mean_squared_error: 60.7068\n","Epoch 6/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - loss: 58.2639 - mean_squared_error: 58.2639 - val_loss: 778.2047 - val_mean_squared_error: 778.2047\n","Epoch 7/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - loss: 122.3091 - mean_squared_error: 122.3091 - val_loss: 27.0193 - val_mean_squared_error: 27.0193\n","Epoch 8/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 23.8123 - mean_squared_error: 23.8123 - val_loss: 29.9603 - val_mean_squared_error: 29.9603\n","Epoch 9/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 3ms/step - loss: 60.7034 - mean_squared_error: 60.7034 - val_loss: 64.8578 - val_mean_squared_error: 64.8578\n","Epoch 10/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 41.0365 - mean_squared_error: 41.0365 - val_loss: 32.4776 - val_mean_squared_error: 32.4776\n","Epoch 11/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 44.3071 - mean_squared_error: 44.3071 - val_loss: 26.8596 - val_mean_squared_error: 26.8596\n","Epoch 12/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - loss: 24.3666 - mean_squared_error: 24.3666 - val_loss: 27.6266 - val_mean_squared_error: 27.6266\n","Epoch 13/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - loss: 42.6985 - mean_squared_error: 42.6985 - val_loss: 26.5776 - val_mean_squared_error: 26.5776\n","Epoch 14/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 25.5289 - mean_squared_error: 25.5289 - val_loss: 31.9824 - val_mean_squared_error: 31.9824\n","Epoch 15/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 29.0077 - mean_squared_error: 29.0077 - val_loss: 44.9783 - val_mean_squared_error: 44.9783\n","Epoch 16/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - loss: 27.9621 - mean_squared_error: 27.9621 - val_loss: 26.4664 - val_mean_squared_error: 26.4664\n","Epoch 17/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 24.3804 - mean_squared_error: 24.3804 - val_loss: 42.3538 - val_mean_squared_error: 42.3538\n","Epoch 18/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - loss: 35.1630 - mean_squared_error: 35.1630 - val_loss: 26.9371 - val_mean_squared_error: 26.9371\n","Epoch 19/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - loss: 24.8082 - mean_squared_error: 24.8082 - val_loss: 25.1472 - val_mean_squared_error: 25.1472\n","Epoch 20/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 21.3921 - mean_squared_error: 21.3921 - val_loss: 25.5548 - val_mean_squared_error: 25.5548\n","Epoch 21/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 3ms/step - loss: 21.1700 - mean_squared_error: 21.1700 - val_loss: 27.9047 - val_mean_squared_error: 27.9047\n","Epoch 22/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 22.7448 - mean_squared_error: 22.7448 - val_loss: 26.2999 - val_mean_squared_error: 26.2999\n","Epoch 23/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - loss: 21.8940 - mean_squared_error: 21.8940 - val_loss: 25.9364 - val_mean_squared_error: 25.9364\n","Epoch 24/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - loss: 22.2889 - mean_squared_error: 22.2889 - val_loss: 25.2743 - val_mean_squared_error: 25.2743\n","Epoch 25/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 21.6221 - mean_squared_error: 21.6221 - val_loss: 25.5694 - val_mean_squared_error: 25.5694\n","Epoch 26/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 23.7999 - mean_squared_error: 23.7999 - val_loss: 25.7546 - val_mean_squared_error: 25.7546\n","Epoch 27/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - loss: 20.7180 - mean_squared_error: 20.7180 - val_loss: 25.5824 - val_mean_squared_error: 25.5824\n","Epoch 28/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 21.4051 - mean_squared_error: 21.4051 - val_loss: 24.9825 - val_mean_squared_error: 24.9825\n","Epoch 29/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 3ms/step - loss: 22.1413 - mean_squared_error: 22.1413 - val_loss: 25.8956 - val_mean_squared_error: 25.8956\n","Epoch 30/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 22.3233 - mean_squared_error: 22.3233 - val_loss: 25.5811 - val_mean_squared_error: 25.5811\n","Epoch 31/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 22.7789 - mean_squared_error: 22.7789 - val_loss: 24.8672 - val_mean_squared_error: 24.8672\n","Epoch 32/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 22.9535 - mean_squared_error: 22.9535 - val_loss: 24.5104 - val_mean_squared_error: 24.5104\n","Epoch 33/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 3ms/step - loss: 23.4501 - mean_squared_error: 23.4501 - val_loss: 25.2828 - val_mean_squared_error: 25.2828\n","Epoch 34/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - loss: 22.2593 - mean_squared_error: 22.2593 - val_loss: 24.4485 - val_mean_squared_error: 24.4485\n","Epoch 35/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - loss: 21.8676 - mean_squared_error: 21.8676 - val_loss: 24.7048 - val_mean_squared_error: 24.7048\n","Epoch 36/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - loss: 20.0465 - mean_squared_error: 20.0465 - val_loss: 25.3275 - val_mean_squared_error: 25.3275\n","Epoch 37/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 20.0330 - mean_squared_error: 20.0330 - val_loss: 25.1122 - val_mean_squared_error: 25.1122\n","Epoch 38/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 3ms/step - loss: 22.6418 - mean_squared_error: 22.6418 - val_loss: 25.2955 - val_mean_squared_error: 25.2955\n","Epoch 39/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - loss: 20.9807 - mean_squared_error: 20.9807 - val_loss: 25.0502 - val_mean_squared_error: 25.0502\n","Epoch 40/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 2ms/step - loss: 21.5145 - mean_squared_error: 21.5145 - val_loss: 26.4645 - val_mean_squared_error: 26.4645\n","Epoch 41/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 21.6769 - mean_squared_error: 21.6769 - val_loss: 25.3479 - val_mean_squared_error: 25.3479\n","Epoch 42/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 3ms/step - loss: 19.5450 - mean_squared_error: 19.5450 - val_loss: 24.4371 - val_mean_squared_error: 24.4371\n","Epoch 43/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - loss: 20.5616 - mean_squared_error: 20.5616 - val_loss: 24.6489 - val_mean_squared_error: 24.6489\n","Epoch 44/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 3ms/step - loss: 20.4843 - mean_squared_error: 20.4843 - val_loss: 24.5357 - val_mean_squared_error: 24.5357\n","Epoch 45/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 2ms/step - loss: 21.6107 - mean_squared_error: 21.6107 - val_loss: 25.9672 - val_mean_squared_error: 25.9672\n","Epoch 46/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 23.2961 - mean_squared_error: 23.2961 - val_loss: 24.5636 - val_mean_squared_error: 24.5636\n","Epoch 47/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 3ms/step - loss: 19.4214 - mean_squared_error: 19.4214 - val_loss: 24.1518 - val_mean_squared_error: 24.1518\n","Epoch 48/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 3ms/step - loss: 20.7139 - mean_squared_error: 20.7139 - val_loss: 24.9493 - val_mean_squared_error: 24.9493\n","Epoch 49/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m3s\u001b[0m 2ms/step - loss: 20.8416 - mean_squared_error: 20.8416 - val_loss: 25.9881 - val_mean_squared_error: 25.9881\n","Epoch 50/50\n","\u001b[1m1189/1189\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m2s\u001b[0m 2ms/step - loss: 20.9831 - mean_squared_error: 20.9831 - val_loss: 25.3722 - val_mean_squared_error: 25.3722\n"]}]},{"cell_type":"markdown","source":["13. Display the plot of the training and validation accuracy vs epoch. (2)"],"metadata":{"id":"sxJ21b_dIFgj"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","\n","plt.figure(figsize=(10, 5))\n","plt.plot(history.history['loss'], label='Training Loss', color='blue')\n","plt.plot(history.history['val_loss'], label='Validation Loss', color='orange', linestyle='--')\n","plt.title('Model Training and Validation Loss')\n","plt.xlabel('Epochs')\n","plt.ylabel('Loss')\n","plt.legend()\n","plt.show()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":487},"id":"BK4yrdvbIGST","executionInfo":{"status":"ok","timestamp":1726210979905,"user_tz":420,"elapsed":461,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}},"outputId":"165bde9f-f326-4275-b071-806fa35cfb97"},"execution_count":64,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["14. Print the R-squared score. (1)"],"metadata":{"id":"zLJPMbqOI4Da"}},{"cell_type":"code","source":["from sklearn.metrics import r2_score\n","\n","y_pred = model.predict(X_test)\n","r_squared = r2_score(y_test, y_pred)\n","print(\"R-squared score:\", r_squared)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JkdxEgQgI550","executionInfo":{"status":"ok","timestamp":1726211055511,"user_tz":420,"elapsed":1749,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}},"outputId":"850129ab-3538-43d1-d548-ea41aa58f2a3"},"execution_count":65,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m510/510\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 1ms/step\n","R-squared score: 0.7305726239900041\n"]}]},{"cell_type":"markdown","source":["15. Finally, print the prediction of taxi fare for 2 passengers riding 3.2 miles at 3:20 pm on a Friday. (3)"],"metadata":{"id":"n6WBn_FeMdBL"}},{"cell_type":"code","source":["import numpy as np\n","\n","#encode the input: passenger_count  weekday  hour  minute  distance\n","#                         2           Friday  15pm  20mins   3.2 miles\n","input = np.array([[2, 4.0, 15, 20, 3.2]])\n","\n","prediction = model.predict(input)\n","\n","print(\"Predicted fare_amount for 2 passengers riding 3.2 miles at 3:20 PM on a Friday is: ${:.5f}\".format(prediction[0][0]))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VPMCcplmMeEV","executionInfo":{"status":"ok","timestamp":1726211383567,"user_tz":420,"elapsed":360,"user":{"displayName":"Stormtrooper NO.1","userId":"13367654530337189918"}},"outputId":"4859c605-20de-4093-d84c-a30c94c03ea3"},"execution_count":70,"outputs":[{"output_type":"stream","name":"stdout","text":["\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 17ms/step\n","Predicted fare_amount for 2 passengers riding 3.2 miles at 3:20 PM on a Friday is: $15.81615\n"]}]}]}